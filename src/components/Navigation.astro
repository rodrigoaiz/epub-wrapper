---
import navigationData from '@/data/megamenu.json';
import type { MenuItem, NavigationData } from '@/types/navigation';

const { title } = Astro.props;
const PATH_LIBRO = '/OEBPS/';

const renderMenuItem = (item: MenuItem): string => {
  const href = item.href.startsWith('/')
    ? PATH_LIBRO + item.href.slice(1)
    : PATH_LIBRO + item.href;

  const hasChildren = Array.isArray(item.children) && item.children.length > 0;

  const childrenContent = hasChildren
    ? `<ol class="submenu hidden pl-4 border-l border-gray-300 text-sm space-y-1">
         ${item.children!.map(child => renderMenuItem(child)).join('')}
       </ol>`
    : '';

  if (hasChildren) {
    return `
      <li class="has-children">
        <button type="button" class="menu-toggle flex justify-between items-center w-full text-left px-2 py-1 text-gray-700 hover:bg-gray-100 rounded transition">
          <span>${item.title}</span>
          <span class="chevron inline-block transform transition-transform duration-300 rotate-0">▶</span>
        </button>
        ${childrenContent}
      </li>
    `;
  }

  return `
    <li>
      <a href="${href}" class="block px-2 py-1 text-gray-700 hover:bg-gray-100 rounded transition">${item.title}</a>
    </li>
  `;
};

---

<header class="toc-wrapper">
  <h1>{title}</h1>
  <nav id="toc">
    <ol set:html={navigationData.items.map(item => renderMenuItem(item)).join('')} />
  </nav>
</header>

<style>
  .toc-wrapper {
  background: #f9f9f9;
  padding: 1rem;
  border: 1px solid #ddd;
  max-width: 300px;
  font-family: sans-serif;
}

#toc ol {
  list-style: none;
  padding-left: 1rem;
  margin: 0;
}

#toc li {
  margin-bottom: 0.5rem;
}

.menu-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.menu-item a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
}

.toggle-submenu {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0 0.25rem;
}

.chevron {
  display: inline-block;
  transition: transform 0.3s ease;
}

.submenu {
  margin-top: 0.3rem;
  padding-left: 1rem;
  border-left: 2px solid #ccc;
}

</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Configurar los toggles del menú
    const menuToggles = document.querySelectorAll('.menu-toggle');

    menuToggles.forEach(button => {
      button.addEventListener('click', () => {
        const li = button.closest('li');
        if (!li) return;

        const submenu = li.querySelector('.submenu') as HTMLElement | null;
        const chevron = button.querySelector('.chevron') as HTMLElement | null;

        const isCurrentlyExpanded = li.classList.contains('expanded'); // Check state BEFORE changing anything

        // Cierra todos los demás elementos expandidos
        document.querySelectorAll('li.expanded').forEach(openLi => {
          openLi.classList.remove('expanded');
          const openSubmenu = openLi.querySelector('.submenu') as HTMLElement | null;
          const openChevron = openLi.querySelector('.chevron') as HTMLElement | null;
          if (openSubmenu) openSubmenu.classList.add('hidden');
          if (openChevron) {
            // Rota de vuelta al estado inicial (derecha)
            openChevron.classList.remove('rotate-90');
            openChevron.classList.add('rotate-0');
          }
        });

        // Si el elemento clickeado NO estaba expandido, expándelo ahora
        if (!isCurrentlyExpanded) {
          li.classList.add('expanded');
          if (submenu) submenu.classList.remove('hidden');
          if (chevron) {
            // Rota al estado expandido (abajo)
            chevron.classList.remove('rotate-0');
            chevron.classList.add('rotate-90');
          }
        }
        // Si SÍ estaba expandido, el bucle anterior ya lo cerró y rotó el chevron.
      });
    });

    // Configurar los enlaces de navegación
    const navigationLinks = document.querySelectorAll('a[href^="/OEBPS/"]');

    navigationLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        if (href) {
          // Envía un evento personalizado que el componente ContentViewer escuchará
          const navEvent = new CustomEvent('navigation:change', {
            detail: { path: href }
          });
          window.dispatchEvent(navEvent);
        }
      });
    });
  });
</script>
